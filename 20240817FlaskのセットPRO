#app.py
from flask import Flask, render_template, request, send_file
import requests
import os
import pandas as pd
from datetime import datetime
from xml.etree import ElementTree as ET
import pygame

app = Flask(__name__)

# スクリプトファイルと同じディレクトリ内の音声ファイルへの相対パス
AUDIO_FILE_PATH = os.path.join(os.path.dirname(__file__), 'キラッ1.mp3')

# Pygame初期化
pygame.mixer.init()

def format_date(date_str):
    for fmt in ("%Y/%m/%d", "%Y年%m月%d日", "%Y年%m月", "%Y年"):
        try:
            return datetime.strptime(date_str, fmt).strftime("%Y/%m/%d")
        except ValueError:
            continue
    return date_str

def fetch_pubmed_data(journal=None, pdat=None, volume=None, issue=None, authors=None):
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
    db = "pubmed"
    retmode = "json"

    params = {
        "db": db,
        "retmode": retmode,
        "term": f"{journal}[journal]" if journal else None,
        "mindate": pdat,
        "maxdate": pdat,
        "volume": volume,
        "issue": issue,
        "author": authors
    }

    filtered_params = {key: value for key, value in params.items() if value}
    response = requests.get(base_url, params=filtered_params)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": f"Failed to fetch data, status code: {response.status_code}", "details": response.text}

def fetch_article_details(uid):
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"
    db = "pubmed"
    retmode = "xml"

    params = {
        "db": db,
        "retmode": retmode,
        "id": uid
    }

    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        return response.text
    else:
        return None

def parse_article_details(xml_data):
    root = ET.fromstring(xml_data)
    title = root.findtext(".//ArticleTitle")
    term = title.replace(" ", "%20")  # スペースを%20に置き換え
    link = f"https://pubmed.ncbi.nlm.nih.gov/?term={term}"
    
    return title, link

def fetch_citmatch_data(journal, volume, page):
    url = f"https://pubmed.ncbi.nlm.nih.gov/api/citmatch/?method=field&journal={journal}&volume={volume}&page={page}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": f"Failed to fetch data, status code: {response.status_code}", "details": response.text}

def play_sound():
    pygame.mixer.music.load(AUDIO_FILE_PATH)
    pygame.mixer.music.play()

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        journal = request.form.get('journal')
        pdat = request.form.get('pdat')
        volume = request.form.get('volume')
        issue = request.form.get('issue')
        authors = request.form.get('authors')

        if not (journal or pdat or volume or issue or authors):
            return render_template('index.html', error="At least one search parameter must be provided.")

        result = fetch_pubmed_data(journal, pdat, volume, issue, authors)
        
        if "error" in result:
            return render_template('index.html', error=result["error"])

        titles = []
        links = []
        if "esearchresult" in result and "idlist" in result["esearchresult"]:
            for uid in result["esearchresult"]["idlist"]:
                details = fetch_article_details(uid)
                if details:
                    title, link = parse_article_details(details)
                    titles.append(title)
                    links.append(link)
        
        citmatch_result = fetch_citmatch_data("Front Immunol", "13", "826091")
        if "result" in citmatch_result and "uids" in citmatch_result["result"]:
            for item in citmatch_result["result"]["uids"]:
                uid = item["pubmed"]
                details = fetch_article_details(uid)
                if details:
                    title, link = parse_article_details(details)
                    titles.append(title)
                    links.append(link)
        
        data = {
            'Title': titles,
            'Link': links
        }

        df = pd.DataFrame(data)
        output_file_path = 'ncbi_api_result_info.xlsx'
        df.to_excel(output_file_path, index=False, engine='openpyxl')
        play_sound()  # 音声を再生

        return send_file(output_file_path, as_attachment=True)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
#######################################################
#index.html 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PubMed Search</title>
</head>
<body>
    <h1>PubMed Search</h1>
    <form method="post">
        <label for="journal">Journal Name:</label>
        <input type="text" id="journal" name="journal"><br><br>
        
        <label for="pdat">Publication Date (YYYY/MM/DD or other formats):</label>
        <input type="text" id="pdat" name="pdat"><br><br>
        
        <label for="volume">Volume:</label>
        <input type="text" id="volume" name="volume"><br><br>
        
        <label for="issue">Issue:</label>
        <input type="text" id="issue" name="issue"><br><br>
        
        <label for="authors">Authors (format: Surname Initial):</label>
        <input type="text" id="authors" name="authors"><br><br>
        
        <button type="submit">Search</button>
    </form>
    
    {% if error %}
    <p style="color: red;">{{ error }}</p>
    {% endif %}
</body>
</html>


############################################
